///////////////////////////////////////////////////////////////
//  Copyright 2013 John Maddock. Distributed under the Boost
//  Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at https://www.boost.org/LICENSE_1_0.txt

#pragma once

#include <cstddef>
#include <stdexcept>

#include "nil/crypto3/multiprecision/big_integer/big_integer.hpp"

namespace nil::crypto3::multiprecision::literals {
    namespace detail {
        constexpr bool is_valid_hex_digit(char c) {
            return ('0' <= c && c <= '9') || ('a' <= c && c <= 'f') || ('A' <= c && c <= 'F');
        }

        constexpr int parse_hex_digit(char c) {
            if ('0' <= c && c <= '9') {
                return c - '0';
            }
            if ('a' <= c && c <= 'f') {
                return (c - 'a') + 10;
            }
            return (c - 'A') + 10;
        }

        template<unsigned Bits, char c1, char c2, char... STR>
        constexpr big_integer<Bits> parse_int_hex() {
            static_assert(c1 == '0', "hex literal should start with 0x");
            static_assert(c2 == 'x', "hex literal should start with 0x");

            big_integer<Bits> result{0};

            std::size_t bits = 0;
            for (const char c : {STR...}) {
                if (!is_valid_hex_digit(c)) {
                    throw std::invalid_argument("non hex character in literal");
                }
                int digit = parse_hex_digit(c);
                result <<= 4;
                if (bits != 0) {
                    bits += 4;
                }
                result += parse_hex_digit(c);
                if (digit != 0) {
                    if (digit >= 8) {
                        bits = 4;
                    } else if (digit >= 4) {
                        bits = 3;
                    } else if (digit >= 2) {
                        bits = 2;
                    } else {
                        bits = 1;
                    }
                }
            }
            if (bits > Bits) {
                throw "not enough bits to store literal";
            }
            return result;
        }
    }  // namespace detail

    template<char... STR>
    constexpr auto operator"" _big_integer() {
        return detail::parse_int_hex<(sizeof...(STR) - 2) * 4, STR...>();
    }
}  // namespace nil::crypto3::multiprecision::literals

#define CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(Bits)                                               \
    namespace nil::crypto3::multiprecision::literals {                                            \
        template<char... STR>                                                                     \
        constexpr auto operator"" _big_integer##Bits() {                                          \
            return nil::crypto3::multiprecision::literals::detail::parse_int_hex<Bits, STR...>(); \
        }                                                                                         \
    }

// This is a comprehensive list of all bitlengths we use in algebra.
// Custom ones can be defined using this macro in every place where they are used.
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(4)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(7)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(8)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(13)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(15)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(16)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(17)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(18)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(64)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(92)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(94)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(128)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(130)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(149)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(150)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(151)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(152)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(160)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(161)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(163)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(164)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(177)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(178)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(179)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(180)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(181)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(182)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(183)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(191)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(192)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(205)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(206)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(222)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(223)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(224)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(225)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(226)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(239)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(248)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(249)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(250)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(251)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(252)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(253)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(254)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(255)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(256)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(257)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(263)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(264)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(280)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(281)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(292)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(293)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(294)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(295)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(296)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(297)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(298)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(315)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(316)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(319)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(320)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(330)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(331)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(374)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(375)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(376)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(377)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(378)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(379)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(380)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(381)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(384)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(503)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(504)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(507)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(512)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(515)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(516)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(521)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(546)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(577)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(578)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(585)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(595)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(636)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(706)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(707)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(758)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(753)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(759)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(761)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(859)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(860)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(893)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(894)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(913)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(1024)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(1490)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(1536)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(2048)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(2790)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(3072)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(4096)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(4269)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(4314)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(6144)
CRYPTO3_MP_DEFINE_BIG_INTEGER_LITERAL(8192)
