
// SPDX-License-Identifier: Apache-2.0.
//---------------------------------------------------------------------------//
// Copyright (c) 2023 Generated by ZKLLVM-transpiler
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//---------------------------------------------------------------------------//
pragma solidity >=0.8.4;

import "../../types.sol";
import "../../basic_marshalling.sol";
import "../../interfaces/modular_gate_argument.sol";
import "hardhat/console.sol";


contract modular_gate_argument_circuit5_chunk10_lpc is IGateArgument{
    uint256 constant modulus = 28948022309329048855892746252171976963363056481941560715954676764349967630337;

    // Append commitments
    function verify(
        bytes calldata blob,
        uint256 theta
    ) external view returns (uint256 F){
        uint256 theta_acc = 1;
        uint256 eval;
        uint256 x;

		uint256 prod;
		uint256 sum;
		uint256 gate;
// gate === 0 ===
		gate = 0;
// constraint 0
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 64);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 96), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 32);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 1
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 160);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 192), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 128);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 2
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 256);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 288), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 224);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 3
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 352);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 384), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 320);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 4
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 448);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 480), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 416);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 5
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 544);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 576), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 512);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 6
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 640);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 672), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 608);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 7
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 736);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 768), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 704);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 8
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 832);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 864), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 800);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 9
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 928);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 960), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 896);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 10
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 1024);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 1056), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 992);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 11
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 1120);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 1152), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 1088);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 12
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 1216);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 1248), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 1184);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 13
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 1312);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 1344), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 1280);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 14
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 1408);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 1440), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 1376);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 15
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 1504);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 1536), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 1472);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 16
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 1600);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 1632), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 1568);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 17
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 1696);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 1728), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 1664);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 18
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 1792);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 1824), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 1760);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 19
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 1888);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 1920), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 1856);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 20
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 1984);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 2016), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 1952);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 21
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2080);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 2112), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2048);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 22
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2176);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 2208), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2144);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 23
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2272);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 2304), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2240);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 24
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2368);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 2400), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2336);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 25
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2464);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 2496), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2432);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 26
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2560);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 2592), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2528);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 27
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2656);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 2688), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2624);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 28
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2752);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 2784), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2720);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
// constraint 29
		sum = 0;
		prod = basic_marshalling.get_uint256_be(blob, 2848);
		prod = mulmod(prod, basic_marshalling.get_uint256_be(blob, 2880), modulus);
		prod = mulmod(prod, 28948022309329048855892746252171976963363056481941560715954676764349967630336, modulus);
		sum = addmod(sum, prod, modulus);
		prod = basic_marshalling.get_uint256_be(blob, 2816);
		sum = addmod(sum, prod, modulus);
		sum = mulmod(sum, theta_acc, modulus);
		theta_acc = mulmod(theta, theta_acc, modulus);
		gate = addmod(gate, sum, modulus);
		gate = mulmod(gate, basic_marshalling.get_uint256_be(blob, 0), modulus);
		F = addmod(F, gate, modulus);

    }
}        